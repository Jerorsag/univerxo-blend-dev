---
import { Heart, MoveRight } from '@lucide/astro';
import { getLandingHero } from '../../services/landing-page';

// Se obtienen los datos del Hero
const {
  encabezado,
  frase,
  descripcion,
  links,
  imagen,
  tagEncabezado,
  tagImagen,
  imageURL,
  tagsConfianza
} = await getLandingHero();
---

<section class="relative bg-gradient-to-br from-[#E8D5E8] via-[#F4E4D6] to-[#E8C4B8] py-24 overflow-hidden">
  <!-- Elementos decorativos de fondo -->
  <div class="absolute inset-0 opacity-30">
    <div class="absolute top-20 left-10 w-64 h-64 bg-gradient-to-br from-[#C8A8D8]/20 to-transparent rounded-full blur-3xl"></div>
    <div class="absolute bottom-20 right-10 w-80 h-80 bg-gradient-to-br from-[#D4A574]/20 to-transparent rounded-full blur-3xl"></div>
    <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-gradient-to-br from-[#E8C4B8]/10 to-transparent rounded-full blur-3xl"></div>
  </div>

  <div class="relative max-w-7xl mx-auto px-6 lg:flex lg:items-center lg:justify-between lg:gap-20">
    
    <!-- Contenido emocional -->
    <div class="max-w-2xl lg:max-w-xl">
      <!-- Etiqueta emocional -->
      <div class="inline-flex items-center bg-white/40 backdrop-blur-sm px-4 py-2 rounded-full mb-6 border border-white/20">
        {tagEncabezado && (
          <span class="text-[#7B3E3E] text-sm font-medium">
            {tagEncabezado.nombre}
          </span>
        )}
      </div>

      <h1 class="text-5xl lg:text-6xl xl:text-7xl font-bold text-[#7B3E3E] leading-[1.1] mb-6">
        {encabezado?.split(' ')[0]}<br>
        <span class="text-[#8B4513] bg-gradient-to-r from-[#8B4513] to-[#A0522D] bg-clip-text text-transparent">{encabezado?.split(' ').slice(1).join(' ')}</span>
      </h1>

      
      <p class="text-[#5C3A32] text-xl lg:text-2xl mb-4 leading-relaxed font-light">
        {frase}
      </p>
      
      <p class="text-[#7B3E3E]/80 text-lg mb-10 leading-relaxed">
        {descripcion}
      </p>

      <!-- Botones de acción -->
      <div class="flex flex-col sm:flex-row gap-4">
        {links?.[0] && (
          <a href={links[0].href} class="group inline-flex items-center justify-center bg-[#7B3E3E] hover:bg-[#6A3434] text-white font-semibold px-8 py-4 rounded-xl transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-1">
            <span>{links[0].label}</span>
            <MoveRight class="ml-2 w-5 h-5 group-hover:translate-x-1 transition-transform" stroke="currentColor" />
          </a>
        )}
        {links?.[1] && (
          <a href={links[1].href} class="group inline-flex items-center justify-center bg-white/80 backdrop-blur-sm hover:bg-white text-[#7B3E3E] font-semibold px-8 py-4 rounded-xl transition-all duration-300 shadow-lg hover:shadow-xl border border-white/20">
            <span>{links[1].label}</span>
            <Heart class="ml-2 w-5 h-5 group-hover:scale-110 transition-transform" stroke="currentColor" />
          </a>
        )}
      </div>

            <!-- Indicadores de confianza dinámicos -->
      {tagsConfianza?.length > 0 && (
        <div class="flex items-center gap-6 mt-8 pt-8 border-t border-white/20">
          {tagsConfianza.map((tag, index) => {
            const texto = tag?.nombre || "";
            const [titulo, ...resto] = texto.split(" ");
            const subtitulo = resto.join(" ");

            return (
              <div class="text-center" key={index}>
                <p class="text-2xl font-bold text-[#7B3E3E]">{titulo}</p>
                <p class="text-sm text-[#7B3E3E]/70">{subtitulo}</p>
              </div>
            );
          })}
        </div>
      )}
    </div>

    <!-- Ilustración mejorada -->
    <div class="mt-16 lg:mt-0 lg:flex-1 flex justify-center lg:justify-end">
      <div class="relative">
        <!-- Contenedor con efectos visuales -->
        <div class="relative bg-white/30 backdrop-blur-sm rounded-3xl p-8 shadow-2xl border border-white/20">
          {imagen && (
            <img
              src={imageURL}
              alt={imagen.alternativeText || 'Hero image'}
              class="animated-svg w-[380px] lg:w-[420px] xl:w-[480px] max-w-full rounded-2xl"
              loading="lazy"
          />
          )}
          
          <!-- Elementos decorativos flotantes -->
          <div class="absolute -top-3 -right-3 w-6 h-6 bg-[#C8A8D8] rounded-full animate-pulse"></div>
          <div class="absolute -bottom-2 -left-2 w-4 h-4 bg-[#E8C4B8] rounded-full animate-pulse" style="animation-delay: 0.5s"></div>
          <div class="absolute top-1/4 -left-4 w-3 h-3 bg-[#D4A574] rounded-full animate-pulse" style="animation-delay: 1s"></div>
        </div>
        
        <!-- Texto flotante inspiracional -->
        {tagImagen && (
          <div class="absolute -bottom-6 -left-6 bg-white/90 backdrop-blur-sm px-4 py-2 rounded-full shadow-lg border border-white/20">
            <p class="text-[#7B3E3E] text-sm font-medium">{tagImagen.nombre}</p>
          </div>
        )}
      </div>
    </div>

  </div>
</section>
<style>
  /* Animaciones para el SVG */
  .animated-svg {
    animation: 
      float 4s ease-in-out infinite,
      breathe 6s ease-in-out infinite,
      fadeInScale 1s ease-out;
    transition: all 0.3s ease;
  }

  .animated-svg:hover {
    transform: scale(1.02) translateY(-5px);
    filter: drop-shadow(0 15px 30px rgba(123, 62, 62, 0.15));
  }

  @keyframes float {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-8px); }
  }

  @keyframes breathe {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.02); }
  }

  @keyframes fadeInScale {
    0% {
      opacity: 0;
      transform: scale(0.9) translateY(20px);
    }
    100% {
      opacity: 1;
      transform: scale(1) translateY(0);
    }
  }

  /* Animaciones para elementos internos del SVG si los tienes */
  .animated-svg:hover :global(path[fill*="heart"]) {
    animation: heartbeat 1s ease-in-out;
  }

  @keyframes heartbeat {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.1); }
  }
</style>